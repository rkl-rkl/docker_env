# nginx运行的用户名
user  nginx;
# nginx启动进程,通常设置成和cpu的数量相等，这里为自动
worker_processes  auto;

# errorlog文件位置   关于error_log 可以设置log的类型(记录什么级别的信息)有：debug、info、notice、warn、error、crit几种
error_log  /var/log/nginx/error.log warn;
# pid文件地址，记录了nginx的pid，方便进程管理
pid        /var/run/nginx.pid;

# 工作模式和连接数上限
events {
    # 每个worker_processes的最大并发链接数
    # 并发总数：worker_processes*worker_connections
    worker_connections  1024;
}

# 与提供http服务相关的一些配置参数类似的还有mail
http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 设置日志的格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$uri" "$request_uri" "$host" "$http_x_forwarded_for" ';

    # access_log记录访问的用户、页面、浏览器、ip和其他的访问信息
    access_log  /var/log/nginx/access.log  main;

    # 设置nginx是否使用sendfile函数输出文件
    # 一般的网络传输过程
    # 硬盘 >> kernel buffer >> user buffer>> kernel socket buffer >>协议栈
    # 使用sendfile后
    # 硬盘 >> kernel buffer (快速拷贝到kernelsocket buffer) >>协议栈
    # 可以显著提高传输性能。
    sendfile        on;

    # tcp_nopush只有在启用了sendfile时才起作用，
    # 在启用tcp_nopush后，程序接收到了数据包后不会马上发出，而是等待数据包最大时一次性发出，可以缓解网络拥堵。(Nagle化)
    # 相反tcp_nodelay则是立即发出数据包.
    # 数据包最大时发包(使用Nagle算法)
    #tcp_nopush     on;
    # 立刻发送数据包(禁用Nagle算法)
    #tcp_nodelay    on;


    # 链接超时时间
    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
